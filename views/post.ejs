<head>
  <link rel="stylesheet" href="/css/styles.css" />
</head>
<h1><%= data.title %></h1>
<article class="article"><%- data.body %></article>

<div id="likeActions">
  <button id="likeButton">Like</button>
  <button id="dislikeButton">Dislike</button>
  <p id="likeStatus"></p>
</div>

<div id="commentSection">
  <h3>Comments</h3>
  <div id="commentsList">
    <!-- Comments will be dynamically loaded here -->
  </div>
  <div id="commentForm">
    <textarea id="commentInput" placeholder="Write your comment..."></textarea>
    <button id="submitCommentButton">Submit</button>
  </div>
</div>

<div id="chatContainer">
  <div id="chatToggle">
    <button id="toggleChatButton">Ask ?</button>
  </div>
  <div id="chatWindow" style="display: none">
    <!-- Chat window hidden by default -->
    <div id="chatMessages">
      <!-- Chat messages will be appended here -->
    </div>
    <div id="inputContainer">
      <!-- New container for input and button -->
      <input type="text" id="userInput" placeholder="Type your question..." />
      <button id="sendButton">Send</button>
    </div>
  </div>
</div>
<script>
  const blogId = "<%= data._id %>"; // Get the blog ID dynamically

  // Function to check if the user has already liked or disliked the post
  async function checkLikeStatus() {
    try {
      const response = await fetch(`/likes/check/${blogId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.liked) {
          // Hide both buttons if the user has already liked or disliked
          document.getElementById("likeButton").style.display = "none";
          document.getElementById("dislikeButton").style.display = "none";
          document.getElementById("likeStatus").innerText =
            "You already liked or disliked this post.";
        }
      }
    } catch (err) {
      console.error("Error checking like status:", err);
    }
  }

  // Call checkLikeStatus to check on page load if the user has liked or disliked the post
  window.onload = checkLikeStatus;

  // Like button functionality
  document.getElementById("likeButton").addEventListener("click", async () => {
    try {
      const response = await fetch(`/likes/like/${blogId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();
        document.getElementById("likeStatus").innerText =
          "You liked this post!";
        checkLikeStatus(); // Recheck the status after liking
      } else {
        const error = await response.json();
        document.getElementById("likeStatus").innerText = error.message;
      }
    } catch (err) {
      document.getElementById("likeStatus").innerText =
        "Error liking the post.";
    }
  });

  // Dislike button functionality
  document
    .getElementById("dislikeButton")
    .addEventListener("click", async () => {
      try {
        const response = await fetch(`/likes/dislike/${blogId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const result = await response.json();
          document.getElementById("likeStatus").innerText =
            "You disliked this post!";
          checkLikeStatus(); // Recheck the status after disliking
        } else {
          const error = await response.json();
          document.getElementById("likeStatus").innerText = error.message;
        }
      } catch (err) {
        document.getElementById("likeStatus").innerText =
          "Error disliking the post.";
      }
    });

  // Chat functionality
  const messages = []; // Initialize an array to store chat messages

  // Toggle chat visibility
  document.getElementById("toggleChatButton").onclick = function () {
    const chatWindow = document.getElementById("chatWindow");
    chatWindow.style.display =
      chatWindow.style.display === "none" ? "block" : "none"; // Toggle chat visibility
  };

  document.getElementById("sendButton").onclick = async function () {
    const userInput = document.getElementById("userInput").value.trim();

    if (!userInput) return; // Prevent sending empty messages

    // Display the user's message
    appendMessage("You", userInput);
    messages.push({ role: "user", content: userInput });

    // Send the user's input to the server
    const response = await fetch("/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ id: blogId, content: userInput }),
    });

    const data = await response.json();

    // Display the assistant's response
    appendMessage("Assistant", data.msg);
    messages.push({ role: "assistant", content: data.msg });

    // Clear the input field
    document.getElementById("userInput").value = "";

    // Scroll to the bottom of the chat
    const chatMessages = document.getElementById("chatMessages");
    chatMessages.scrollTop = chatMessages.scrollHeight;
  };

  function appendMessage(sender, content) {
    const chatMessages = document.getElementById("chatMessages");
    const messageDiv = document.createElement("div");
    messageDiv.innerHTML = `<strong>${sender}:</strong> ${content}`;
    chatMessages.appendChild(messageDiv);
  }

  const commentsApiUrl = "/comment"; // API endpoint for comments

  // Load comments for the blog post
  async function loadComments() {
    try {
      const response = await fetch(`${commentsApiUrl}/${blogId}`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      if (response.ok) {
        const comments = await response.json();
        const commentsList = document.getElementById("commentsList");
        commentsList.innerHTML = ""; // Clear existing comments
        comments.forEach((comment) => {
          const commentDiv = document.createElement("div");
          commentDiv.className = "comment";
          commentDiv.innerHTML = `<strong>${comment.userName}:</strong> ${comment.content}`;
          commentsList.appendChild(commentDiv);
        });
      } else {
        console.error("Failed to load comments");
      }
    } catch (err) {
      console.error("Error loading comments:", err);
    }
  }

  // Handle comment submission
  document
    .getElementById("submitCommentButton")
    .addEventListener("click", async () => {
      const commentInput = document.getElementById("commentInput");
      const commentContent = commentInput.value.trim();

      if (!commentContent) {
        alert("Comment cannot be empty");
        return;
      }

      try {
        const response = await fetch(commentsApiUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ blogId, content: commentContent }),
        });

        if (response.ok) {
          commentInput.value = ""; // Clear the input field
          loadComments(); // Reload comments
        } else {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        }
      } catch (err) {
        console.error("Error submitting comment:", err);
      }
    });

  // Load comments on page load
  loadComments();
</script>
